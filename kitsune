#!/bin/bash -x

NAME=kitsune
LOGFILE="/var/log/${NAME}.log"
if [ -r "${NAME}.conf" ]; then
  . "${NAME}.conf"
elif [ -r "/opt/rfctf/${NAME}.conf" ]; then
  . "/opt/rfctf/${NAME}.conf"
fi

bluetooth_checks() {
  #make sure BLUETOOTH_DEV exists
  #wait a few seconds for bluetooth to be up if needed
  if [ -n "${BLUETOOTH_DEV}" ]; then
    iter=0
    while true; do
      if hciconfig "${BLUETOOTH_DEV}" > /dev/null 2>&1; then
        printf "BLUETOOTH_DEV \"%s\" exists, continuing.\n" "${BLUETOOTH_DEV}"
        break
      else
        iter=$((iter + 1))
        if [ $iter -ge 60 ]; then
          printf "FATAL BLUETOOTH_DEV \"%s\" does not exist.\n" "${BLUETOOTH_DEV}"
          exit 1
        else
          printf "DEBUG Waiting for BLUETOOTH_DEV %s seconds...\n" "${iter}"
          sleep 1
        fi
      fi
    done
  else
    printf "FATAL BLUETOOTH_DEV must be defined in the config file.\n"
    exit 1
  fi
  #unblock
  printf "Bluetooth device found, unblocking rfkill...\n"
  if rfkill unblock bluetooth; then
    printf "Bluetooth unblocked.\n"
  else
    printf "Bluetooth rfkill is stuck.\n"
    exit 1
  fi
  #make sure interface is running
  printf "Bluetooth starting...\n"
  if hciconfig "${BLUETOOTH_DEV}" up; then
    printf "Bluetooth is running.\n"
  else
    printf "FATAL Failed to start bluetooth.\n"
  fi
}

ibeacon_checks() {
  if [ -z "${IBEACON_PROX_UUID}" ] || [ "${#IBEACON_PROX_UUID}" != 32 ]; then
    printf "FATAL IBEACON_PROX_UUID must be 32 hex characters (16 hex bytes)\n"
    exit 1
  fi
  if printf "${IBEACON_PROX_UUID}" | grep -qiE --color=never '[a-fA-F0-9]{16}'; then
    true
  else
    printf "FATAL IBEACON_PROX_UUID must be hex\n."
    exit 1
  fi
  if [ -z "${IBEACON_MAJOR}" ] || [ "${#IBEACON_MAJOR}" != 4 ] || [ -z "${IBEACON_MINOR}" ] || [ "${#IBEACON_MINOR}" != 4 ]; then
    printf "FATAL IBEACON_MAJOR and IBEACON_MINOR must be 4 hex characters (2 hex bytes)\n"
    exit 1
  fi
  if printf "${IBEACON_MAJOR}" | grep -qiE --color=never '[a-fA-F0-9]{4}'; then
    true
  else
    printf "FATAL IBEACON_MAJOR must be hex\n"
    exit 1
  fi
  if printf "${IBEACON_MINOR}" | grep -qiE --color=never '[a-fA-F0-9]{4}'; then
    true
  else
    printf "FATAL IBEACON_MINOR must be hex\n"
    exit 1
  fi
  if [ -z "${IBEACON_RSSI}" ] || [ "${#IBEACON_RSSI}" != 2 ]; then
    printf "FATAL IBEACON_RSSI must be 2 hex characters (1 hex byte)\n"
    exit 1
  fi
  if printf "${IBEACON_RSSI}" | grep -qiE --color=never '[a-fA-F0-9]{2}'; then
    true
  else
    printf "FATAL IBEACON_RSSI must be hex\n."
    exit 1
  fi
}

hcitool_format() {
  printf "%s" "${1}" | tr 'a-z' 'A-Z' | sed 's/../ &/g;s/^ //'
}

hcitool_format_interval() {
  if [ -z "${IBEACON_INTERVAL_MS}" ]; then
    printf "WARN IBEACON_INTERVAL_MS should be set, defaulting to 100ms\n"
    IBEACON_INTERVAL_MS=100
  fi
  if [ "${IBEACON_INTERVAL_MS}" -lt 100 ]; then
    printf "WARN IBEACON_INTERVAL_MS has a minimum of 100ms, forcing minimum.\n"
  fi
  if [ $(printf "${IBEACON_INTERVAL_MS} > 40959.375\n" | bc -l) -eq 1 ]; then
    printf "WARN IBEACON_INTERVAL_MS has a maximum of40,959.375, forcing maximum\n"
    IBEACON_INTERVAL_MS=40959.375
  fi

  #ignore the shellcheck warning on this line
  temp_int=$(printf "scale=0; obase=16;${IBEACON_INTERVAL_MS} / 0.625\n" | bc -l)
  #this substring stuff requires bash
  case "${#temp_int}" in
    2)
      printf "%s 00 %s 00" "${temp_int}" "${temp_int}"
      ;;
    3)
      printf "%s 0%s %s 0%s" "${temp_int:1}" "${temp_int:0:1}" "${temp_int:1}" "${temp_int:0:1}"
      ;;
    4)
      printf "%s %s %s %s" "${temp_int:2}" "${temp_int:0:2}" "${temp_int:2}" "${temp_int:0:2}"
      ;;
    *)
      printf "FATAL Failed to convert IBEACON_INTERVAL_MS to hex.\n"
      exit 1
      ;;
  esac
}

random_mac() {
  #first octect must be even so do that
  maybe_even=$((${RANDOM} % 16))
  if [ "$((${maybe_even} % 2))" -eq "1" ]; then
    multicast_char=$((${maybe_even} - 1))
  else
    multicast_char=${maybe_even}
  fi

  random_mac="$(printf "%X%X:%X%X:%X%X:%X%X:%X%X:%X%X" $((${RANDOM} % 16)) ${multicast_char} $((${RANDOM} % 16)) $((${RANDOM} % 16)) $((${RANDOM} % 16)) $((${RANDOM} % 16)) $((${RANDOM} % 16)) $((${RANDOM} % 16)) $((${RANDOM} % 16)) $((${RANDOM} % 16)) $((${RANDOM} % 16)) $((${RANDOM} % 16)))"
  printf "%s" "${random_mac}"
}

kitsune_bluetooth() {
  case "${1}" in
    start)
      bluetooth_checks
      #set mac if requested
      if [ -n "${BLUETOOTH_MAC}" ]; then
        if [ "${BLUETOOTH_MAC}" = "random" ]; then
          bdaddr -i "${BLUETOOTH_DEV}" -r "$(random_mac)"
        elif printf "${BLUETOOTH_MAC}" | grep -qE '([[:xdigit:]]{2}:){5}[[:xdigit:]]{2}'; then
          bdaddr -i "${BLUETOOTH_DEV}" -r "${BLUETOOTH_MAC}"
        else
          printf "BLUETOOTH_MAC \"%s\" doesn\'t appear to be a valid mac address.  Ignoring.\n" "${BLUETOOTH_MAC}" 2>&1
        fi
      fi
      #set name if requested
      if [ -n "${BLUETOOTH_NAME}" ]; then
        if [ "${#BLUETOOTH_NAME}" -gt 48 ]; then
          printf "BLUETOOTH_NAME is longer than 48 characters and will be truncated.\n"
        fi
        hciconfig "${BLUETOOTH_DEV}" name "${BLUETOOTH_NAME}"
      fi
      #base config in place, reset to make it effective
      hciconfig "${BLUETOOTH_DEV}" reset
      #pscan is enabled on reset and we don't want to be pairable
      hciconfig "${BLUETOOTH_DEV}" noscan
      #bluetooth classic came first
      if [ -n "${CLASSIC_DISCOVERABLE}" ] && [ "${CLASSIC_DISCOVERABLE}" = "true" ]; then
        if [ -n "${RESPOND_L2PING}" ] && [ "${RESPOND_L2PING}" = "true" ]; then
          #both inquiry scan and page scan enabled
          hciconfig "${BLUETOOTH_DEV}" piscan
        else
          #only inquiry scan requested
          hciconfig "${BLUETOOTH_DEV}" iscan
        fi
      elif [ -n "${RESPOND_L2PING}" ] && [ "${RESPOND_L2PING}" = "true" ]; then
        #only page scan requested
        hciconfig "${BLUETOOTH_DEV}" pscan
      fi
      #iBeacon
      if [ -n "${IBEACON_ENABLED}" ] && [ "${IBEACON_ENABLED}" = "true" ]; then
        ibeacon_checks
        hcitool -i hci0 cmd 0x08 0x0008 1E 02 01 06 1A FF 4C 00 02 15 $(hcitool_format ${IBEACON_PROX_UUID}) $(hcitool_format ${IBEACON_MAJOR}) $(hcitool_format ${IBEACON_MINOR}) "${IBEACON_RSSI}" 00
        hcitool -i hci0 cmd 0x08 0x0006 $(hcitool_format_interval) 03 00 00 00 00 00 00 00 00 07 00
        hcitool -i hci0 cmd 0x08 0x000a 01
      fi
      ;;
    stop)
      rfkill unblock bluetooth
      hciconfig "${BLUETOOTH_DEV}" noscan
      hciconfig "${BLUETOOTH_DEV}" noleadv
      hciconfig "${BLUETOOTH_DEV}" reset
      rfkill block bluetooth
      ;;
    *)
      printf "FATAL: bluetooth function called without start or stop.\n"
      ;;
  esac
}

main() {
  case "${1}" in
    start)
      printf "[+] Starting Kitsune FaaS...\n"

      #first, shut up
      rfkill block all

      if [ "${BLUETOOTH_ENABLED}" = "true" ]; then
        kitsune_bluetooth start
      fi

      printf "[+] Kitsune FaaS completed.\n"
      exit 0
      ;;
    stop)
      printf "[+] Stopping Kitsune FaaS...\n"

      #it might be a restart, so shut everything down
      kitsune_bluetooth stop

      #quiet, we are shutting down
      rfkill block all

      printf "[+] Kitsune FaaS stopped.\n"
      exit 0
      ;;
    restart)
      main stop 2>&1 | tee -a "${LOGFILE}"
      main start 2>&1 | tee -a "${LOGFILE}"
      ;;
    *)
      printf "usage: ${0} {start|stop|restart}\n"
      exit 1
  esac
}

run_check() {
  #this finds itself and exits
  if pgrep -af './kitsune' || pgrep -af '/opt/rfctf/kitsune'; then
    printf "Kitsune is already running, cowardly refusing to run twice.\n"
    exit 1
  fi
}

#run_check
main "${1}" 2>&1 | tee "${LOGFILE}"
